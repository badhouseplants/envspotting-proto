/// This file has messages for describing contours
syntax = "proto3";
package contours.v1;
option go_package = "/contours";
import "common/common.proto";

/**
 * Service for handling contours
 */
service Contours {  
  /// Use to add a whole new app
  rpc Create(ContourName) returns (ContourInfo) {} 
  /// Use to get app by ProjectID
  rpc Get(ContourId) returns (ContourInfo) {}
  /// Use to list all apps in db
  rpc List(common.EmptyMessage) returns (stream ContourInfo) {}
  /// Use to update an app (add/edit contour, edit name)
  rpc Update(ContourInfo) returns (ContourInfo) {}
  /// Use to delete an app (❗️not implemented yet❗️)
  rpc Delete(ContourInfo) returns (common.EmptyMessage) {}
  /// Use to add a services to the contour
  rpc AddServices(common.EmptyMessage) returns (common.EmptyMessage) {};
}

/**
 * Represents an contour name only
*/
message ContourName {
  string name = 1; // Application name
}

/**
 * Represents an contour UUID only
 */
message ContourId {
  string id = 1; // Contour id: UUID
}

/**
 * Represents a contour
*/
message ContourInfo {
  string id = 1; // UUID
  string name = 2; // Contour name: Unique string
  repeated Service services = 3; // Array of maps <projectID:environmentID>
}

message ContourIdAndName { 
  string id = 1; // UUID
  string name = 2; // Contour name: Unique string
}

message ContourIdAndServices { 
  string id = 1; // UUID
  repeated Service services = 2; // Array of maps <projectID:environmentID>
}

message ContourIdAndService { 
  string id = 1; // UUID
  repeated Service services = 2; // Array of maps <projectID:environmentID>

}
/**
 * Represents a service
*/
message Service {
  int64 project = 1; // Project ID from Gitlab
  int64 environment = 2; //  Environment ID from Gitlab
}